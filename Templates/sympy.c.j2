#include "stdlib.h"
#include "math.h"
#include <string.h>
#include <stdio.h>

struct dataobj
{
    void *restrict data;
    int * size;
} ;


int solver(const float dt, const float h_x, const float h_y, struct dataobj *restrict u_vec, const int time_M, const int time_m, const int x_M, const int x_m, const int y_M, const int y_m)
{
    double (*restrict u)[u_vec->size[1]][u_vec->size[2]] = (double (*)[u_vec->size[1]][u_vec->size[2]]) u_vec->data;

    {{code}}

    FILE *f;

    f = fopen("myOutput1","w");

    for (int t = 0; t < 3; t += 1) {
        for (int x = x_m; x < x_M; x += 1) {
            for (int y = y_m; y < y_M; y += 1) {
                fprintf(f, "u[%d][%d][%d] %f\n", t, x, y, u[t][x][y]);
            };
        };
    }

    fclose(f);

    return 0;
}

int main() {
    int i = {{pde.u_shape[0]}};
    int j = {{pde.u_shape[1]}};
    int k = {{pde.u_shape[2]}};

    int size[3] = {i,j,k};
    
    double myarray[{{pde.u_shape[0]}}][{{pde.u_shape[1]}}][{{pde.u_shape[2]}}] = {{pde.u_data}};

    struct dataobj u_vec = { .data = myarray, .size = size };

    solver({{pde.dt}}, {{pde.step_x}}, {{pde.step_y}}, &u_vec, {{pde.max_time}}, {{pde.min_time}}, {{pde.max_x}}, {{pde.min_x}}, {{pde.max_y}}, {{pde.min_y}});

    return 0;
}